// Mixins:

@mixin formatMainHeading($font-size,
  $font-weight,
  $letter-spacing,
  $animation-name) {
  font-size: $font-size;
  font-weight: $font-weight;
  letter-spacing: $letter-spacing;
  animation-name: $animation-name;
}

// CLEARFIX

// The Clearfix hack is a method used on float layouts. Here's how it works:
// When a block or inline-block level element has no child elements nor content, its height defaults to zero.
// When working with float layouts, sometimes you will set 'float' to all child elements of a parent, removing them from the document flow. When that happens, and the parent doesn't have a height specified, it collapses to zero.
// The Clearfix hack exists to solve this problem.

// 1) First you need to specify a pseudo-element (::before or ::after) to the parent element which has its children floeated out of the document flow;
// 2) As with all pseudo-elements, we need to define the content. Since we don't want no content to be displayer, we set it to an empty string;
// 3) Then we set its 'display' property to 'table';
// 4) And finally we set 'clear' to 'both';

// For further explanation, see: https://youtu.be/2tC4PIlEz_o

// Here we will create a mixin to write all this code:
@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin calcColumnWidth ($guttersInRow, $numOfColumns, $colSpan) {
  // Calculate the sum of the width of all gutters in the grid row
  // A 4-col grid row has 3 gutters, etc...
  $totalGutterWidth: #{$guttersInRow} * #{$gutter-horizontal};

  // What is the width of the base column in that row?
  $baseGridColumn: calc((100% - #{$totalGutterWidth}) / #{$numOfColumns});

  // Does this column span through more than one grid column?
  // If so, how many gutters the span go through?
  $hiddenGutters: calc(#{$colSpan} - 1);

  // Considering all of the above, calculate the width of the column
  $fullColumnWidth: calc((#{$colSpan} * #{$baseGridColumn}) + (#{$hiddenGutters} * #{$gutter-horizontal}));

  // Outputs the calculated width
  width: $fullColumnWidth;
}

@mixin box-shadow--smooth {
  box-shadow: 0 1.5rem 4rem 0 rgba($color: $color-black, $alpha: .15);
}

@mixin center-block {
  // TODO refactor to 'margin-align--center'
  margin-left: auto;
  margin-right: auto;
}

// TODO create @mixin to centralize block using 'position'
// position: absolute or fixed;
// top: 50%;
// left: 50%;
// transform: translate(-50%, -50%);